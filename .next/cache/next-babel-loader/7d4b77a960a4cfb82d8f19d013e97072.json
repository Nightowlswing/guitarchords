{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar _jsxFileName = \"/home/oem/Documents/Development/Courswork/guitarchords/components/AddSong/AddSong.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport '../../Styles/AddSong.css';\nimport { FormText } from 'reactstrap';\nimport Axios from 'axios';\nimport EditText from './EditText/editText';\nimport '../../Styles/FormStyle/FormStyle.css';\n\nconst formValid = formErrors => {\n  let valid = true;\n\n  _Object$values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  return valid;\n};\n\nclass AddSong extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault(); //console.log(EditText(this.state.text));\n\n      if (formValid(this.state.formErrors)) {\n        this.handleSongData(this.state.cname, this.state.sname, this.state.capo, EditText(this.state.text), this.state.genre);\n      } else {\n        alert('Songs data is INVALID');\n      }\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      e.preventDefault();\n      const {\n        name,\n        value\n      } = e.target;\n      let formErrors = this.state.formErrors;\n\n      switch (name) {\n        case 'cname':\n          formErrors.cname = value.length > 0 & value.length < 64 ? \"\" : \"invalid compositors name\";\n          this.setState({\n            cname: value\n          });\n          break;\n\n        case 'sname':\n          formErrors.sname = value.length > 0 & value.length < 64 ? \"\" : \"invalid sons name\";\n          this.setState({\n            sname: value\n          });\n          break;\n\n        case 'capo':\n          formErrors.capo = value.length < 64 & value.length >= 0 ? \"\" : \"invalid capo data\";\n          this.setState({\n            capo: value\n          });\n          break;\n\n        case 'genre':\n          formErrors.genre = value.length > 0 & value.length < 64 ? \"\" : \"invalid genre\";\n          this.setState({\n            genre: value\n          });\n          break;\n\n        case 'text':\n          formErrors.text = value.length > 255 & value.length < 2000 ? \"\" : \"invalid text\";\n          this.setState({\n            text: value\n          });\n          break;\n      }\n    });\n\n    this.state = {\n      cname: null,\n      sname: null,\n      capo: null,\n      text: null,\n      genre: null,\n      status: null,\n      formErrors: {\n        cname: \"\",\n        sname: \"\",\n        capo: \"\",\n        text: \"\",\n        genre: \"\"\n      }\n    };\n  }\n\n  handleSongData(cname, sname, capo, text, genre) {\n    Axios.get('http://localhost:3210/addsong/', {\n      params: {\n        cname: cname,\n        sname: sname,\n        capo: capo,\n        genre: genre,\n        text: text\n      }\n    }).then(response => {\n      console.log(response.data);\n      div = document.querySelector('#songForm').innerHTML = response.data;\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  componentDidMount() {// Axios.get('http://localhost:3210/allSongs').then ((response) => { this.setState({songs: response.data})});\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"whiteBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, __jsx(Instruction, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), __jsx(\"span\", {\n      id: \"songForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), __jsx(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, __jsx(LineInput, {\n      onChange: this.handleChange,\n      type: \"compname\",\n      label: \"Name of compositor\",\n      name: \"cname\",\n      placeholder: \"Ed Sheeran\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), __jsx(LineInput, {\n      onChange: this.handleChange,\n      type: \"songname\",\n      label: \"Name of song\",\n      name: \"sname\",\n      placeholder: \"Perfect\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), __jsx(LineInput, {\n      onChange: this.handleChange,\n      type: \"capo\",\n      label: \"Capo\",\n      name: \"capo\",\n      placeholder: \"1 fret\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), __jsx(LineInput, {\n      onChange: this.handleChange,\n      type: \"genre\",\n      label: \"Genre\",\n      name: \"genre\",\n      placeholder: \"pop-folk\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), __jsx(Button, {\n      divclassname: \"SingIn\",\n      buttonclassname: \"SubmitButton\",\n      name: \"submit\",\n      name: \"submit\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), __jsx(TextInput, {\n      onChange: this.handleChange,\n      classdiv: \"textblock\",\n      label: \"classtext\",\n      placeholder: \"Song's Text\",\n      name: \"text\",\n      placeholder: \"Song text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst Instruction = props => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 143\n  },\n  __self: this\n}, __jsx(\"text\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 144\n  },\n  __self: this\n}, \"Hi!\", __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 145\n  },\n  __self: this\n}), \" Here's some rules for you to help you input your song correctly\", __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 145\n  },\n  __self: this\n}), __jsx(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 146\n  },\n  __self: this\n}, \"1\"), \"You should write your chords in the text using [...]\", __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 146\n  },\n  __self: this\n}), __jsx(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 147\n  },\n  __self: this\n}, \"2\"), \"First - chord, then words\", __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 147\n  },\n  __self: this\n}), __jsx(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148\n  },\n  __self: this\n}, \"3\"), \"Mark all 'nextlines' with $\", __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148\n  },\n  __self: this\n}), __jsx(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 149\n  },\n  __self: this\n}, \"4\"), \"Mark the next verse with @\", __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 149\n  },\n  __self: this\n})), __jsx(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151\n  },\n  __self: this\n}, \"expample\"), __jsx(\"img\", {\n  className: \"exImg\",\n  src: \"../../static/ex1.jpg\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 152\n  },\n  __self: this\n}), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 152\n  },\n  __self: this\n}), \"translates into this\", __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 152\n  },\n  __self: this\n}), __jsx(\"img\", {\n  className: \"exImg\",\n  src: \"../../static/ex2.jpg\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 153\n  },\n  __self: this\n}));\n\nconst LineInput = props => __jsx(\"div\", {\n  className: `${props.name} formdiv`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 159\n  },\n  __self: this\n}, __jsx(\"label\", {\n  className: \"FormLabel\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 160\n  },\n  __self: this\n}, props.label), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 160\n  },\n  __self: this\n}), __jsx(\"input\", {\n  type: `${props.type}`,\n  className: \"FormInput\",\n  placeholder: `${props.placeholder}`,\n  name: `${props.name}`,\n  noValidate: true,\n  onChange: props.onChange,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 161\n  },\n  __self: this\n}));\n\nconst TextInput = props => __jsx(\"div\", {\n  className: `${props.classdiv}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 174\n  },\n  __self: this\n}, __jsx(\"textarea\", {\n  onChange: props.onChange,\n  className: `${props.classtext}`,\n  name: \"text\",\n  placeholder: `${props.placeholder}`,\n  cols: \"100\",\n  rows: \"40\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 175\n  },\n  __self: this\n}));\n\nconst Button = props => __jsx(\"div\", {\n  className: `${props.divclassname}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 180\n  },\n  __self: this\n}, __jsx(\"button\", {\n  className: `${props.buttonclassname}`,\n  type: `${props.type}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 181\n  },\n  __self: this\n}, props.name));\n\nexport default AddSong;","map":{"version":3,"sources":["/home/oem/Documents/Development/Courswork/guitarchords/components/AddSong/AddSong.jsx"],"names":["React","Component","Link","useRouter","FormText","Axios","EditText","formValid","formErrors","valid","forEach","val","length","AddSong","constructor","props","e","preventDefault","state","handleSongData","cname","sname","capo","text","genre","alert","name","value","target","setState","status","get","params","then","response","console","log","data","div","document","querySelector","innerHTML","catch","error","componentDidMount","render","handleSubmit","handleChange","Instruction","LineInput","label","type","placeholder","onChange","TextInput","classdiv","classtext","Button","divclassname","buttonclassname"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport '../../Styles/AddSong.css';\nimport { FormText } from 'reactstrap';\nimport Axios from 'axios';\nimport EditText from './EditText/editText';\nimport '../../Styles/FormStyle/FormStyle.css';\n\n\nconst formValid = formErrors =>{\n    let valid = true;\n\n    Object.values(formErrors).forEach(val => {\n        val.length > 0 && (valid = false)\n    });\n\n    return valid;\n}\n\nclass AddSong extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            cname: null,\n            sname: null,\n            capo: null,\n            text: null,\n            genre: null,\n            status: null,\n            formErrors:{\n                cname: \"\",\n                sname: \"\",\n                capo: \"\",\n                text: \"\",\n                genre: \"\"\n            }\n        }\n    } \n    \n    handleSubmit = e => {\n        e.preventDefault();\n        //console.log(EditText(this.state.text));\n        if (formValid(this.state.formErrors)) {\n            this.handleSongData(this.state.cname,this.state.sname,this.state.capo,EditText(this.state.text),this.state.genre)\n          }\n          else {\n            alert('Songs data is INVALID');\n          }\n \n    };\n\n    handleSongData (cname,sname,capo,text,genre){\n        Axios.get('http://localhost:3210/addsong/', {\n            params: {\n                cname: cname,\n                sname: sname,\n                capo: capo,\n                genre: genre,\n                text: text\n            }\n            })\n            .then( (response) => {\n              console.log(response.data)\n              div = document.querySelector('#songForm').innerHTML = response.data;\n            }\n            )\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    handleChange = e => {\n        e.preventDefault();\n        const {name, value} = e.target;\n        let formErrors = this.state.formErrors;\n        switch(name) {\n            case 'cname':\n                formErrors.cname = \n                    value.length > 0 & value.length < 64\n                        ?\"\"\n                        :\"invalid compositors name\";\n                this.setState({cname: value});\n                break;\n            case 'sname':\n                formErrors.sname = \n                    value.length > 0 & value.length <64\n                        ?\"\"\n                        :\"invalid sons name\";\n                this.setState({sname: value});\n                break;\n            case 'capo':\n                formErrors.capo = \n                    value.length < 64 & value.length >= 0\n                        ?\"\"\n                        :\"invalid capo data\";\n                this.setState({capo: value});\n            break;\n            case 'genre':\n                formErrors.genre = \n                    value.length > 0 & value.length <64\n                        ?\"\"\n                        :\"invalid genre\";\n                this.setState({genre: value});\n            break;\n            case 'text':\n                formErrors.text = \n                    value.length > 255 & value.length <2000\n                        ?\"\"\n                        :\"invalid text\";\n                this.setState({text: value});\n            break;\n            \n        }   \n    }\n    \n    componentDidMount(){\n       // Axios.get('http://localhost:3210/allSongs').then ((response) => { this.setState({songs: response.data})});\n    }\n    render(){\n        return(\n            \n            <div className = \"whiteBlock\">\n                <Instruction/>\n\n                <span id = 'songForm' ></span>\n                <form onSubmit = {this.handleSubmit}>\n                    <LineInput onChange = {this.handleChange} type = 'compname' label = 'Name of compositor' name = 'cname' placeholder = 'Ed Sheeran'/>\n                    <LineInput onChange = {this.handleChange} type = 'songname' label = 'Name of song' name = 'sname' placeholder = 'Perfect'/>\n                    <LineInput onChange = {this.handleChange} type = 'capo' label = 'Capo' name = 'capo' placeholder = '1 fret'/>\n                    <LineInput onChange = {this.handleChange} type = 'genre' label = 'Genre' name = 'genre' placeholder = 'pop-folk'/>\n                    <Button divclassname = 'SingIn' buttonclassname = 'SubmitButton' name = 'submit' name = 'submit' placeholder = ''/>\n                    <TextInput onChange = {this.handleChange} classdiv = 'textblock' label = 'classtext' placeholder = \"Song's Text\" name = 'text' placeholder = \"Song text\"/>\n                </form>\n            </div>\n\n        );\n    }\n   \n}\n\nconst Instruction = props =>(\n    <div>\n        <text>\n            Hi!<br/> Here's some rules for you to help you input your song correctly<br/>\n            <h4>1</h4>You should write your chords in the text using [...]<br/>\n            <h4>2</h4>First - chord, then words<br/>\n            <h4>3</h4>Mark all 'nextlines' with $<br/>\n            <h4>4</h4>Mark the next verse with @<br/>\n        </text>\n        <h4>expample</h4>\n        <img className ='exImg' src = '../../static/ex1.jpg'></img><br/>translates into this<br/>\n        <img className ='exImg' src = '../../static/ex2.jpg'></img>\n        \n    </div>\n);\n\nconst LineInput = props =>(\n    <div className = {`${props.name} formdiv`}>\n    <label className= 'FormLabel'>{props.label}</label><br/>\n    <input \n    type = {`${props.type}`}\n    className = 'FormInput' \n    placeholder = {`${props.placeholder}`}\n    name = {`${props.name}`}\n    noValidate\n    onChange ={props.onChange}\n    />\n</div>\n\n);\n\nconst TextInput = props =>(\n    <div className = {`${props.classdiv}`}>\n        <textarea onChange ={props.onChange} className = {`${props.classtext}`} name=\"text\" placeholder = {`${props.placeholder}`} cols=\"100\" rows=\"40\"/>\n    </div>\n);\n\nconst Button = props => (\n    <div className = {`${props.divclassname}`}>\n      <button className = {`${props.buttonclassname}`} type = {`${props.type}`}>{props.name}</button>\n    </div>\n  )\n\nexport default AddSong;"]},"metadata":{},"sourceType":"module"}