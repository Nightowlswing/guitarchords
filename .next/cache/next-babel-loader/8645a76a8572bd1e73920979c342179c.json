{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/oem/Documents/Development/Courswork/guitarchords/components/AddSong/AddSong.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport '../../Styles/AddSong.css';\nimport { FormText } from 'reactstrap';\nimport Axios from 'axios';\nimport EditText from './EditText/editText';\n\nclass AddSong extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      console.log(EditText(this.state.text));\n\n      if (formValid(this.state.formErrors)) {} else {\n        alert('Songs data is INVALID');\n      }\n    });\n\n    _defineProperty(this, \"handleSongData\", e => {\n      e.preventDefault();\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      e.preventDefault();\n      const {\n        name,\n        value\n      } = e.target;\n\n      switch (name) {\n        case 'cname':\n          formErrors.cname = value.length > 2 ? \"\" : \"invalid compositors name\";\n          this.setState({\n            cname: value\n          });\n          break;\n\n        case 'sname':\n          formErrors.sname = value.length > 2 ? \"\" : \"invalid sons name\";\n          this.setState({\n            sname: value\n          });\n          break;\n\n        case 'capo':\n          formErrors.capo = value.length < 16 ? \"\" : \"invalid capo data\";\n          this.setState({\n            capo: value\n          });\n          break;\n\n        case 'genre':\n          formErrors.genre = value.length > 2 ? \"\" : \"invalid genre\";\n          this.setState({\n            genre: value\n          });\n          break;\n\n        case 'text':\n          formErrors.text = value.length > 255 ? \"\" : \"invalid text\";\n          this.setState({\n            text: value\n          });\n          break;\n      }\n    });\n\n    this.state = {\n      cname: null,\n      sname: null,\n      capo: null,\n      text: null,\n      genre: null,\n      formErrors: {\n        cname: \"\",\n        sname: \"\",\n        capo: \"\",\n        text: \"\",\n        genre: \"\"\n      }\n    };\n  }\n\n  componentDidMount() {// Axios.get('http://localhost:3210/allSongs').then ((response) => { this.setState({songs: response.data})});\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"whiteBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, __jsx(LineInput, {\n      onChange: this.handleChange,\n      type: \"compname\",\n      placeholder: \"Name of compositor\",\n      name: \"cname\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), __jsx(LineInput, {\n      onChange: this.handleChange,\n      type: \"songname\",\n      placeholder: \"Name of song\",\n      name: \"sname\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), __jsx(LineInput, {\n      onChange: this.handleChange,\n      type: \"capo\",\n      placeholder: \"Capo\",\n      name: \"capo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), __jsx(LineInput, {\n      onChange: this.handleChange,\n      type: \"genre\",\n      placeholder: \"Genre\",\n      name: \"genre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), __jsx(Button, {\n      divclassname: \"SingIn\",\n      buttonclassname: \"SubmitButton\",\n      type: \"submit\",\n      name: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), __jsx(TextInput, {\n      onChange: this.handleChange,\n      classdiv: \"textblock\",\n      classtext: \"classtext\",\n      placeholder: \"Song's Text\",\n      name: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst LineInput = props => __jsx(\"div\", {\n  className: `${props.name}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111\n  },\n  __self: this\n}, __jsx(\"label\", {\n  className: \"FormLabel\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112\n  },\n  __self: this\n}, props.name), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112\n  },\n  __self: this\n}), __jsx(\"input\", {\n  type: `${props.type}`,\n  className: \"FormInput\",\n  placeholder: `${props.placeholder}`,\n  name: `${props.name}`,\n  noValidate: true,\n  onChange: props.onChange,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 113\n  },\n  __self: this\n}));\n\nconst TextInput = props => __jsx(\"div\", {\n  className: `${props.classdiv}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 126\n  },\n  __self: this\n}, __jsx(\"textarea\", {\n  onChange: props.onChange,\n  className: `${props.classtext}`,\n  name: \"text\",\n  placeholder: `${props.placeholder}`,\n  cols: \"100\",\n  rows: \"40\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 127\n  },\n  __self: this\n}));\n\nconst Button = props => __jsx(\"div\", {\n  className: `${props.divclassname}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 132\n  },\n  __self: this\n}, __jsx(\"button\", {\n  className: `${props.buttonclassname}`,\n  type: `${props.type}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 133\n  },\n  __self: this\n}, props.name));\n\nexport default AddSong;","map":{"version":3,"sources":["/home/oem/Documents/Development/Courswork/guitarchords/components/AddSong/AddSong.jsx"],"names":["React","Component","Link","useRouter","FormText","Axios","EditText","AddSong","constructor","props","e","preventDefault","console","log","state","text","formValid","formErrors","alert","name","value","target","cname","length","setState","sname","capo","genre","componentDidMount","render","handleSubmit","handleChange","LineInput","type","placeholder","onChange","TextInput","classdiv","classtext","Button","divclassname","buttonclassname"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport '../../Styles/AddSong.css';\nimport { FormText } from 'reactstrap';\nimport Axios from 'axios';\nimport EditText from './EditText/editText';\n\nclass AddSong extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            cname: null,\n            sname: null,\n            capo: null,\n            text: null,\n            genre: null,\n            formErrors:{\n                cname: \"\",\n                sname: \"\",\n                capo: \"\",\n                text: \"\",\n                genre: \"\"\n            }\n        }\n    } \n    \n    handleSubmit = e => {\n        e.preventDefault();\n        console.log(EditText(this.state.text));\n        if (formValid(this.state.formErrors)) {\n            \n          }\n          else {\n            alert('Songs data is INVALID');\n          }\n \n    };\n\n    handleSongData = e => {\n        e.preventDefault();\n        \n    }\n\n    handleChange = e => {\n        e.preventDefault();\n        const {name, value} = e.target;\n        switch(name) {\n            case 'cname':\n                formErrors.cname = \n                    value.length > 2\n                        ?\"\"\n                        :\"invalid compositors name\";\n                this.setState({cname: value});\n                break;\n            case 'sname':\n                formErrors.sname = \n                    value.length > 2\n                        ?\"\"\n                        :\"invalid sons name\";\n                this.setState({sname: value});\n                break;\n            case 'capo':\n                formErrors.capo = \n                    value.length < 16\n                        ?\"\"\n                        :\"invalid capo data\";\n                this.setState({capo: value});\n            break;\n            case 'genre':\n                formErrors.genre = \n                    value.length > 2\n                        ?\"\"\n                        :\"invalid genre\";\n                this.setState({genre: value});\n            break;\n            case 'text':\n                formErrors.text = \n                    value.length > 255\n                        ?\"\"\n                        :\"invalid text\";\n                this.setState({text: value});\n            break;\n            \n        }   \n    }\n    \n    componentDidMount(){\n       // Axios.get('http://localhost:3210/allSongs').then ((response) => { this.setState({songs: response.data})});\n    }\n    render(){\n        return(\n \n            <div className = \"whiteBlock\">\n                <form onSubmit = {this.handleSubmit}>\n                    <LineInput onChange = {this.handleChange} type = 'compname' placeholder = 'Name of compositor' name = 'cname'/>\n                    <LineInput onChange = {this.handleChange} type = 'songname' placeholder = 'Name of song' name = 'sname'/>\n                    <LineInput onChange = {this.handleChange} type = 'capo' placeholder = 'Capo' name = 'capo'/>\n                    <LineInput onChange = {this.handleChange} type = 'genre' placeholder = 'Genre' name = 'genre'/>\n                    <Button divclassname = 'SingIn' buttonclassname = 'SubmitButton' type = 'submit' name = 'submit'/>\n                    <TextInput onChange = {this.handleChange} classdiv = 'textblock' classtext = 'classtext' placeholder = \"Song's Text\" name = 'text'/>\n                </form>\n            </div>\n\n        );\n    }\n   \n}\n\nconst LineInput = props =>(\n    <div className = {`${props.name}`}>\n    <label className= 'FormLabel'>{props.name}</label><br/>\n    <input \n    type = {`${props.type}`}\n    className = 'FormInput' \n    placeholder = {`${props.placeholder}`}\n    name = {`${props.name}`}\n    noValidate\n    onChange ={props.onChange}\n    />\n</div>\n\n);\n\nconst TextInput = props =>(\n    <div className = {`${props.classdiv}`}>\n        <textarea onChange ={props.onChange} className = {`${props.classtext}`} name=\"text\" placeholder = {`${props.placeholder}`} cols=\"100\" rows=\"40\"/>\n    </div>\n);\n\nconst Button = props => (\n    <div className = {`${props.divclassname}`}>\n      <button className = {`${props.buttonclassname}`} type = {`${props.type}`}>{props.name}</button>\n    </div>\n  )\n\nexport default AddSong;"]},"metadata":{},"sourceType":"module"}